{% import "contents/transaction/product-list.jinja" as productListMacros %}
<script>
	//let table = new DataTable('#table-list', {
	//	// options
	//});
</script>
<style>.is-hidden { display: none; }</style>
<div class="pcoded-content">
	<!-- [ breadcrumb ] start -->
	<div class="page-header">
		<div class="page-block">
			<div class="row align-items-center">
				<div class="col-md-6">
					<div class="page-header-title">
						<h5 class="m-b-10">{{ data.title }}</h5>
					</div>
					<ul class="breadcrumb">
						<li class="breadcrumb-item"><a href="{{ url_for('index') }}">Ikhtisar</a></li>
						<li class="breadcrumb-item">Master data</li>
						<li class="breadcrumb-item"><a href="{{ url_for('transaction') }}">Transaksi</a></li>
						<li class="breadcrumb-item">{{ data.title }}</li>
					</ul>
				</div>
			</div>
		</div>
	</div>
	<!-- [ breadcrumb ] end -->

	<!-- [ Main Content ] start -->
	<div class="row">
		<!-- support-section start -->
		<div class="col-md-12 col-xl-12">
			<!--<h5>Header and Footer</h5>
			<hr>-->
			<div class="card">
				<h5 class="card-header">{{ data.title }}</h5>
				<div class="card-body">

					<!-- Action buttons -->
					<div class="row mb-4">
						<div class="col-md d-flex flex-row">
							<!--<div class="btn-group">
								<button class="btn btn-sm btn-shadow btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Expor</button>
								<div class="dropdown-menu">
									<a class="dropdown-item" href="#!">.pdf</a>
									<a class="dropdown-item" href="#!">Another action</a>
									<a class="dropdown-item" href="#!">Something else here</a>
								</div>
							</div>-->
						</div>
						<div class="col-md d-flex flex-row-reverse">
							<!--<button class="btn btn-sm btn-shadow btn-primary">Tambah</button>-->
						</div>
					</div>

					<!-- Form -->
					<form class="row g-3" action="{{ url_for('transaction_manage', uuid=data.transaction.uuid) if (data.transaction.uuid) else url_for('transaction_manage') }}" method="POST" enctype="multipart/form-data">

						<div class="col-md-4">
							<label for="trunsactionNumber" class="form-label">{{ data.form.nomor_transaksi.label }}</label>

							{{ data.form.nomor_transaksi(class="form-control", id="trunsactionNumber", value=data.transaction.nomor_transaksi) }}
						</div>

						<div class="col-4">
							<label for="transactionDate" class="form-label">{{ data.form.tanggal_transaksi.label }}</label>

							{{ data.form.tanggal_transaksi(class="form-control", id="transactionDate", value=data.transaction.tanggal_transaksi) }}
						</div>

						<div class="col-md-4">
							<label for="customerName" class="form-label">{{ data.form.nama_pelanggan.label }}</label>

							{{ data.form.nama_pelanggan(class="form-control", id="customerName", value=data.transaction.nama_pelanggan) }}
						</div>

						<div class="col-md-12">
							<label for="productList" class="form-label">{{ data.form.daftar_produk.label }}</label>

							<div class="row">
								<div class="col-md-10" id="productList">
									{% for produk in data.form.daftar_produk %}
										{{ productListMacros.render_product_list_item(produk, loop.index0) }}
									{% endfor %}
								</div>

								<div class="col-md" id="productList">
									<button type="button" class="btn btn-primary" onclick="addForm();">Tambah</button>
								</div>
							</div>
						</div>

						{#<div class="col-md-4">

							<label for="productSelect" class="form-label">{{ 'Produk' }}</label>
							<select id="productSelect" class="form-select" onchange="onProductSelectChange(event);">
								<option>-- Pilih produk obat --</option>
								{% for item in data.drugs %}
									<option value="{{ item.id }}" text="{{ item.option_text }}">
										{{ item.option_text }}
									</option>
								{% endfor %}
							</select>
						</div>

						<div class="col-md-1">
							<label for="productQuantity" class="form-label">Jumlah</label>
							<input type="number" class="form-control" min="1" value="1" id="productQuantity">
						</div>

						<div class="col-md-2">
							<button type="button" class="btn btn-primary" style="margin-top: 29px !important;" onclick="addProductItemToCart(event);">Tambah produk</button>
						</div>

						<div class="col-md-5">
							<div class="table-wrapper">
								<label for="product-cart" class="form-label">Daftar produk</label>
								<table class="table table-secondary table-condensed table-bordered m-b-0">
									<thead>
										<tr><th>Produk obat</th> <th>Jumlah</th> </tr>
									</thead>
									<tbody id="cart-item">
										<tr><td class="text-center" colspan="2">Belum ada data produk</td></tr>
									</tbody>
								</table>
							</div>
						</div>#}

						<div class="col-12 d-flex justify-content-center mb-3">
							<button type="button" class="btn btn-secondary">Batal</button>
							<button type="submit" class="btn btn-primary ml-3">Simpan</button>
						</div>
					</form>

					{{ productListMacros.render_product_list_item(_transactionProductListFormTemplate, '_') }}
				</div>
			</div>
		</div>
		<!-- customer-section end -->
	</div>
	<!-- [ Main Content ] end -->
</div>

<script type="text/javascript">
	const ID_RE = /(-)_(-)/;
	// const ID_RE = /(-)_/;

	/**
	* Replace the template index of an element (-_-) with the
	* given index.
	*/
	function replaceTemplateIndex(value, index) {
		// value.replace(ID_RE, '$1' + index)
		return value.replace(ID_RE, '$1' + index + '$2');
	}

	/**
	* Adjust the indices of form fields when removing items.
	*/
	function adjustIndices(removedIndex) {
		let forms = document.getElementsByClassName('productItem');

		if (forms) Array.from(forms).forEach((childElement) => {
			// let form = $(this);
			let form = childElement;
			let index = parseInt(form.dataset.index);
			let newIndex = index - 1;

			if (index < removedIndex) {
				// Skip
				return true;
			}

			// This will replace the original index with the new one
			// only if it is found in the format -num-, preventing
			// accidental replacing of fields that may have numbers
			// intheir names.
			// let regex = new RegExp('(-)'+index+'(-)');
			// let repVal = '$1'+newIndex+'$2';
			let regex = new RegExp('(-)' + index + '(-)');
			let repVal = '$1' + newIndex + '$2';

			// Change ID in form itself
			form.setAttribute('id', form.getAttribute('id').replace(index, newIndex));
			form.dataset.index = newIndex;

			// Change IDs in form fields
			Array.from(form.getElementsByTagName('label, input, select, textarea')).forEach((childElement) => {
				// let item = $(this);
				let item = document.querySelectorAll(childElement);

				if (item.tagName == 'label') {
					// Update labels
					item.setAttribute('for', item.getAttribute('for').replace(regex, repVal));
					return;
				}

				// Update other fields
				item.setAttribute('id', item.getAttribute('id').replace(regex, repVal));
				item.setAttribute('name', item.getAttribute('name').replace(regex, repVal));
			});
		});
	}

	/**
	* Remove a form.
	*/
	function removeForm(productItemIndex) {
		// let removedForm = $(this).closest('.subform');
		let removedForm = document.getElementById('daftar_produk-' + productItemIndex + '-list');
		let removedIndex = parseInt(removedForm.dataset.index);

		removedForm.remove();

		// Update indices
		adjustIndices(removedIndex);
	}

	/**
	* Add a new form.
	*/
	function addForm() {
		let templateForm = document.getElementById('daftar_produk-_-list');

		if (templateForm && templateForm.length == 0) {
			console.log('[ERROR] Cannot find template');
			return;
		}

		// Get Last index
		let lastForm = document.querySelectorAll('.productItem')[document.querySelectorAll('.productItem').length - 1];

		let newIndex = 0;

		if (lastForm) {
			newIndex = parseInt(lastForm.dataset.index) + 1;
		}

		// Maximum of 100 subforms
		if (newIndex >= 100) {
			console.log('[WARNING] Reached maximum number of elements');
			return;
		}

		// Add elements
		let newForm = templateForm.cloneNode(true);

		newForm.setAttribute('id', replaceTemplateIndex(newForm.getAttribute('id'), newIndex));
		newForm.dataset.index = (newIndex);

		Array.from(newForm.querySelectorAll('label, input, select, textarea')).forEach((childInNewItem) => {
			// let item = $(this);
			let item = childInNewItem;

			if (item.tagName == 'label') {
				// Update labels
				item.setAttribute('for', replaceTemplateIndex(item.getAttribute('for'), newIndex));
				return;
			}

			// Update other fields
			if (item.getAttribute('id')) item.setAttribute('id', replaceTemplateIndex(item.getAttribute('id'), newIndex));
			if (item.getAttribute('name')) item.setAttribute('name', replaceTemplateIndex(item.getAttribute('name'), newIndex));
		});

		// Reassign onclick event on remove button
		newForm.querySelector('#productItemRemove').setAttribute('onclick', 'removeForm(' + newIndex + ')');

		// Append
		document.getElementById('productList').append(newForm);
		newForm.className += " productItem"
		newForm.className = newForm.className.replace(' is-hidden', '')
	}

	window.document.addEventListener("DOMContentLoaded", function () {
		//document.getElementById('productItemAdd')?.click(addForm);
		//document.getElementById('productItemRemove')?.click(removeForm);
	});
</script>